name: CI/CD for FastAPI Backend with Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ibnujabir/mirtech-assesment
  WORKING_DIR: /backend/app

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}/${{ secrets.POSTGRES_DB }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        env:
          PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          HOST: ${{ secrets.SERVER_HOST }}
          USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
            # Create docker-compose.yml file
            cat > docker-compose.yml << EOF
            version: "3.8"
            
            services:
              api:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
                ports:
                  - "8000:8000"
                environment:
                  - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DB}
                  - REDIS_HOST=${REDIS_HOST}
                  - REDIS_PASSWORD=${REDIS_PASSWORD}
                  - REDIS_PORT=${REDIS_PORT}
                depends_on:
                  - postgres
                  - redis
              
              postgres:
                image: postgres:14
                environment:
                  - POSTGRES_USER=${POSTGRES_USER}
                  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                  - POSTGRES_DB=${POSTGRES_DB}
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                  
              redis:
                image: redis:6
                volumes:
                  - redis_data:/data
            
            volumes:
              postgres_data:
              redis_data:
            EOF
            
            # Create .env file with secrets
            cat > .env << EOF
            DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}/${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            EOF
            
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Start the services with env file
            docker-compose --env-file .env down
            docker-compose --env-file .env up -d
          '
