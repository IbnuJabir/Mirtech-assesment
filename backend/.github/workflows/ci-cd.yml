name: CI/CD for FastAPI Backend with Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ibnujabir/mirtech-assesment
  WORKING_DIR: .

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Run tests
        run: |
          pytest
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  build-and-push-image:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}"
            "REDIS_HOST=redis"
            "REDIS_PORT=6379"
            "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
            "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
            "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
            "POSTGRES_PORT=5432"

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        env:
          PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          HOST: ${{ secrets.SERVER_HOST }}
          USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
            # Create docker-compose.yml file
            cat > docker-compose.yml << EOF
            version: "3.8"
            
            services:
              api:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
                ports:
                  - "8000:8000"
                environment:
                  - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
                  - REDIS_HOST=redis
                  - REDIS_PORT=6379
                depends_on:
                  - postgres
                  - redis
              
              postgres:
                image: postgres:14
                environment:
                  - POSTGRES_USER=${POSTGRES_USER}
                  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                  - POSTGRES_DB=${POSTGRES_DB}
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                  
              redis:
                image: redis:6
                volumes:
                  - redis_data:/data
            
            volumes:
              postgres_data:
              redis_data:
            EOF
            
            # Create .env file with secrets
            cat > .env << EOF
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            EOF
            
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Start the services with env file
            docker-compose --env-file .env down
            docker-compose --env-file .env up -d
          '
